#!/usr/bin/env python
# encoding: utf-8

import sys
import os, os.path
import whiteface.sdk
from whiteface.sdk.client import Client
import yaml
import logging
import traceback
import select
import pprint
pp = pprint.PrettyPrinter()

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
from argparse import ArgumentError


from whiteface.sdk.format.table import Table

LIMIT = 5000
REMOTE = 'https://whiteface.csirtgadgets.com/api'
TIMEOUT = 300

VERSION = whiteface.sdk.VERSION

def main(argv=None): # IGNORE:C0111
    '''Command line options.'''
    
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % VERSION
    program_version_message = '%%(prog)s %s' % (program_version)

    # Setup argument parser
    parser = ArgumentParser(description='', formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]")
    parser.add_argument('-d', '--debug', dest='debug', action="store_true")
    parser.add_argument('-V', '--version', action='version', version=program_version_message)


    parser.add_argument('--token', dest='token', help="specify token")
    parser.add_argument('--limit', dest="limit", help="result limit", default=LIMIT)
    parser.add_argument('--no-verify-ssl', dest="no_verify_ssl", action="store_true", default=False)
    parser.add_argument('--remote', dest="remote", help="remote api location [default: %(default)s]",
                        default=REMOTE)
    parser.add_argument('--timeout', dest="timeout", help='connection timeout [default: %(default)s]',
                        default=TIMEOUT)
    parser.add_argument('-C', '--config', dest="config", help="configuration file [default: %(default)s]",
                        default=os.path.expanduser("~/.wf.yml") )

    # actions
    parser.add_argument('-p', '--ping', dest="ping", action="store_true", help="ping")

    parser.add_argument('--feed', dest='feed', help="retrieve a feed")
    parser.add_argument('--feed-create', dest="feed_create", help="create a new feed", )

    parser.add_argument('-q',"--search", dest="observable", help="search for observable")
    parser.add_argument('--observable', dest='observable')
    parser.add_argument('--observable-create', action='store_true', dest="observable_create")


    # vars
    parser.add_argument('--user', dest='user')
    parser.add_argument('--thing', dest='thing')
    parser.add_argument('--tags', dest='tags')
    parser.add_argument('--comment', dest='comment')

    # Process arguments
    args = parser.parse_args()

    # setup the initial console logging
    fmt = '%(asctime)s - %(levelname)s - %(name)s::%(threadName)s - %(message)s'
    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG

    console = logging.StreamHandler()
    logging.getLogger('').setLevel(loglevel)
    console.setFormatter(logging.Formatter(fmt))
    logging.getLogger('').addHandler(console)
    logger = logging.getLogger(__name__)

    options = vars(args)

    # TODO -- defaults
    if os.path.isfile(args.config):
        f = file(args.config)
        config = yaml.load(f)
        f.close()
        if not config['client']:
            raise Exception("Unable to read " + args.config + " config file")
        config = config['client']
        for k in config:
            if not options.get(k):
                options[k] = config[k]

    cli = Client(**options)

    if options.get('ping'):
        for num in range(0,4):
            ret = Client(**options).ping()
            print "roundtrip: %s ms" % ret
            select.select([], [], [], 1)

    elif options.get('observable_create'):
        tags = []
        if options.get('tags'):
            tags = options['tags'].split(',')
        ret = cli.observable_create(options['user'], options['feed'], options['thing'],
                                    tags=tags, comment=options.get('comment'))

        pp.pprint(ret)

    elif options.get('observable'):
        ret = cli.observable(options['observable'], user=options.get('user'), feed=options.get('feed'))
        if len(ret) > 0:
            pp.pprint(ret)
            print Table(data=ret)

    elif options.get('feed_create'):
        if not options.get('user'):
            parser.error('--user is required')

        ret = cli.feed_create(options['user'], options['feed_create'])
        print('Feed {0} created...'.format(ret['feed']['name']))

    elif options.get('feed'):
        if not options.get('user'):
            parser.error('--user is required')

        ret = cli.feed(options['user'], options['feed'])
        if len(ret) > 0:
            print Table(data=ret)

    else:
        logger.warning('operation not supported')
        sys.exit()

if __name__ == "__main__":
    sys.exit(main())
