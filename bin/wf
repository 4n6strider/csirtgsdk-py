#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import os.path
import logging
from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
import textwrap

import yaml

from whiteface.feed import Feed
from whiteface.observable import Observable
from whiteface.search import Search
from whiteface.format.table import Table

LIMIT = 5000
REMOTE = 'https://whiteface.csirtgadgets.com/api'
TIMEOUT = 300


def main():
    parser = ArgumentParser(
        description=textwrap.dedent('''\
        example usage:
            $ wf --search example.com
            $ wf --user wes --feeds
            $ wf --user wes --feed scanners --new --thing 1.2.3.4 --portlist 22 --tags ssh,scanner
            $ wf --user wes --feed vnc --new
        '''),
        formatter_class=RawDescriptionHelpFormatter,
        prog='wf'
    )

    parser.add_argument("-v", "--verbose", dest="verbose", action="count",
                        help="set verbosity level [default: %(default)s]")
    parser.add_argument('-d', '--debug', dest='debug', action="store_true")

    parser.add_argument('--token', dest='token', help="specify token")
    parser.add_argument('--limit', dest="limit", help="result limit", default=LIMIT)
    parser.add_argument('--remote', dest="remote", help="remote api location [default: %(default)s]",
                        default=REMOTE)
    parser.add_argument('--timeout', dest="timeout", help='connection timeout [default: %(default)s]',
                        default=TIMEOUT)
    parser.add_argument('-C', '--config', dest="config", help="configuration file [default: %(default)s]",
                        default=os.path.expanduser("~/.wf.yml") )

    # actions
    parser.add_argument("--search", dest="search", help="search for an observable")
    parser.add_argument('--feeds', dest='feeds', action="store_true", help="list feeds")
    parser.add_argument('--new', dest="new", action='store_true', help="create a new feed or observable")


    # vars
    parser.add_argument('--user', dest='user', help="specify a user")
    parser.add_argument('--feed', dest='feed', help="specify feed name")
    parser.add_argument('--observable', dest='thing', help="specify an observable [eg: 1.2.3.4, evilsite.com, "
                                                           "http://badsite.org/1.html")
    parser.add_argument('--tags', dest='tags', help="specify tags")
    parser.add_argument('--comment', dest='comment', help="specify a comment")
    parser.add_argument('--description', dest='description', help="specify a feed description")

    parser.add_argument('--portlist', dest="portlist", help="specify a portlist [eg: 22,23-35,443]")
    parser.add_argument('--protocol', dest='protocol', help="specify TCP, UDP or ICMP")

    # Process arguments
    args = parser.parse_args()

    # setup the initial console logging
    fmt = '%(asctime)s - %(levelname)s - %(name)s::%(threadName)s - %(message)s'

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG

    console = logging.StreamHandler()
    logging.getLogger('').setLevel(loglevel)
    console.setFormatter(logging.Formatter(fmt))
    logging.getLogger('').addHandler(console)
    logger = logging.getLogger(__name__)

    options = vars(args)

    if os.path.isfile(args.config):
        f = file(args.config)
        config = yaml.load(f)
        f.close()
        if not config:
            raise Exception("Unable to read " + args.config + " config file")
        for k in config:
            if not options.get(k):
                options[k] = config[k]

        if config.get('remote') and (options['remote'] == REMOTE):
            options['remote'] = config['remote']

    if options.get('search'):
        ret = Search(**options).index()
        print Table(data=ret)

    elif options.get('feeds'):
        feeds = Feed(**options).index()
        from prettytable import PrettyTable
        cols = ['name', 'description', 'license', 'updated_at']
        t = PrettyTable(cols)
        for f in feeds:
            r = []
            for c in cols:
                y = f['feed'].get(c)
                if c == 'license':
                    y = y['name']
                y = str(y)
                y = (y[:30] + '..') if len(y) > 30 else y
                r.append(y)
            t.add_row(r)
        print str(t)

    elif options.get('feed') and options.get('new') and not options.get('thing'):
        if not options.get('user'):
            parser.error('--user is required')

        feed = Feed(**options).new()

        from prettytable import PrettyTable
        cols = ['name', 'description', 'license', 'updated_at']
        t = PrettyTable(cols)
        r = []
        for c in cols:
            y = feed.get(c)
            if c == 'license':
                y = y['name']
            y = str(y)
            y = (y[:30] + '..') if len(y) > 30 else y
            r.append(y)
        t.add_row(r)

        print str(t)

    elif options.get('feed') and not options.get('new'):
        if not options.get('user'):
            parser.error('--user is required')

        f = Feed(**options)
        print Table(data=f.show())

    elif options.get('feed') and options.get('observable') and options.get('new'):
        try:
            ret = Observable(**options).new()
            logger.info('posted: {0}'.format(ret['observable']['location']))
            ret = {
                'feed': {
                    'observables': [ret]
                }
            }
            print Table(data=ret)
        except RuntimeError as e:
            logger.error(e)

if __name__ == "__main__":
    sys.exit(main())