#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import os.path
import yaml
import logging

from pprint import pprint

from argparse import ArgumentParser
from argparse import RawDescriptionHelpFormatter
from argparse import ArgumentError

from whiteface.sdk.feed import Feed
from whiteface.sdk.observable import Observable
from whiteface.sdk.search import Search
from whiteface.sdk.format.table import Table
from whiteface.sdk import VERSION

LIMIT = 5000
REMOTE = 'https://whiteface.csirtgadgets.com/api'
TIMEOUT = 300


def main(argv=None):
    if argv is None:
        argv = sys.argv
    else:
        sys.argv.extend(argv)

    program_name = os.path.basename(sys.argv[0])
    program_version = "v%s" % VERSION
    program_version_message = '%%(prog)s %s' % (program_version)

    # Setup argument parser
    parser = ArgumentParser(description='', formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %(default)s]")
    parser.add_argument('-d', '--debug', dest='debug', action="store_true")
    parser.add_argument('-V', '--version', action='version', version=program_version_message)


    parser.add_argument('--token', dest='token', help="specify token")
    parser.add_argument('--limit', dest="limit", help="result limit", default=LIMIT)
    parser.add_argument('--remote', dest="remote", help="remote api location [default: %(default)s]",
                        default=REMOTE)
    parser.add_argument('--timeout', dest="timeout", help='connection timeout [default: %(default)s]',
                        default=TIMEOUT)
    parser.add_argument('-C', '--config', dest="config", help="configuration file [default: %(default)s]",
                        default=os.path.expanduser("~/.wf.yml") )

    # actions
    parser.add_argument('-q', "--search", dest="search", help="search for observable")

    parser.add_argument('--feed', dest='feed', help="retrieve a feed")
    parser.add_argument('--feeds', dest='feeds', action="store_true", help="list feeds for a user")

    parser.add_argument('--new', dest="new", action='store_true')


    # vars
    parser.add_argument('--user', dest='user')
    parser.add_argument('--thing', dest='thing')
    parser.add_argument('--tags', dest='tags')
    parser.add_argument('--comment', dest='comment')
    parser.add_argument('--description', dest='description')

    parser.add_argument('--portlist', dest="portlist")
    parser.add_argument('--protocol', dest='protocol', default=6)

    # Process arguments
    args = parser.parse_args()

    # setup the initial console logging
    fmt = '%(asctime)s - %(levelname)s - %(name)s::%(threadName)s - %(message)s'

    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.INFO
    if args.debug:
        loglevel = logging.DEBUG

    console = logging.StreamHandler()
    logging.getLogger('').setLevel(loglevel)
    console.setFormatter(logging.Formatter(fmt))
    logging.getLogger('').addHandler(console)
    logger = logging.getLogger(__name__)

    options = vars(args)

    # TODO -- defaults
    if os.path.isfile(args.config):
        f = file(args.config)
        config = yaml.load(f)
        f.close()
        if not config:
            raise Exception("Unable to read " + args.config + " config file")
        for k in config:
            if not options.get(k):
                options[k] = config[k]

        if config.get('remote') and (options['remote'] == REMOTE):
            options['remote'] = config['remote']

    if options.get('search'):
        ret = Search(**options).get()
        print Table(data=ret)

    elif options.get('feeds'):
        feeds = Feed(**options).index()
        from prettytable import PrettyTable
        cols = ['name', 'description', 'license', 'updated_at']
        t = PrettyTable(cols)
        for f in feeds:
            r = []
            for c in cols:
                y = f['feed'].get(c)
                if c == 'license':
                    y = y['name']
                y = str(y)
                y = (y[:30] + '..') if len(y) > 30 else y
                r.append(y)
            t.add_row(r)
        print str(t)

    elif options.get('feed') and options.get('new') and not options.get('thing'):
        if not options.get('user'):
            parser.error('--user is required')

        feed = Feed(**options).new()

        from prettytable import PrettyTable
        cols = ['name', 'description', 'license', 'updated_at']
        t = PrettyTable(cols)
        r = []
        for c in cols:
            y = feed.get(c)
            if c == 'license':
                y = y['name']
            y = str(y)
            y = (y[:30] + '..') if len(y) > 30 else y
            r.append(y)
        t.add_row(r)

        print str(t)

    elif options.get('feed') and not options.get('new'):
        if not options.get('user'):
            parser.error('--user is required')

        f = Feed(**options)
        print Table(data=f.show())

    elif options.get('feed') and options.get('thing') and options.get('new'):
        try:
            ret = Observable(**options).new()
            logger.info('posted: {0}'.format(ret['observable']['location']))
            ret = {
                'feed': {
                    'observables': [ret]
                }
            }
            print Table(data=ret)
        except RuntimeError as e:
            logger.error(e)

if __name__ == "__main__":
    sys.exit(main())
